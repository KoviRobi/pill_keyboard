@code_type c .c
@comment_type /* %s */
@compiler lit -t main.lit && gcc main.c -c -o main.o
@title Keyboard driver for STM32F103C8T6 ($2 bluepill board)

@s Overview

This currently just blinks the LEDs. More interesting stuff to come!

--- main.c
@{Includes}

static vector_table_t* bootloader_vector_table = (vector_table_t*)0x08000000;

void sys_tick_handler(void)
{
    @{Read keyboard matrix}
}

void usb_lp_can_rx0_isr(void) {
    // See https://community.st.com/s/question/0D50X00009Xke6SSAR/stm32f1-usb-interrupts-why-lp-and-hp
    @{USB Interrupt Handler}
}

int main(void) {
    @{Initialise GPIOs}
    @{Initialise USB}

    while (1) {
      @{Blink LEDs}
    }
}
---

@s Initialisation

We need to initialise the GPIOs, for which we need to turn on the clocks on the
corresponding peripherals.  The reason we need to do this is because this
allows the device to avoid drawing current for peripherals which are unused.

--- Initialise GPIOs
rcc_clock_setup_in_hse_8mhz_out_72mhz();
rcc_periph_clock_enable(RCC_GPIOA);
rcc_periph_clock_enable(RCC_GPIOB);
rcc_periph_clock_enable(RCC_GPIOC);
---

We also want to turn off the JTAG, for which we need to use the
alternate-function registers.
--- Initialise GPIOs +=
rcc_periph_clock_enable(RCC_AFIO);
gpio_primary_remap(AFIO_MAPR_SWJ_CFG_JTAG_OFF_SW_ON, 0);
rcc_periph_clock_disable(RCC_AFIO);
---

And turn on the LEDs
--- Initialise GPIOs +=
gpio_set_mode(GPIOA,
  GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_OPENDRAIN,
  GPIO0);
gpio_set(GPIOA, GPIO0);
gpio_set_mode(GPIOC,
  GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_OPENDRAIN,
  GPIO13 | GPIO14 | GPIO15);
gpio_set(GPIOC, GPIO13 | GPIO14 | GPIO15);
---

--- Initialise USB
---

@s Blinking LEDs
--- Blink LEDs
static int counter = 0;
if (counter&1) gpio_clear(GPIOC, GPIO13); else gpio_set(GPIOC, GPIO13);
if (counter&2) gpio_clear(GPIOC, GPIO14); else gpio_set(GPIOC, GPIO14);
if (counter&4) gpio_clear(GPIOC, GPIO15); else gpio_set(GPIOC, GPIO15);
if (counter&8) gpio_clear(GPIOA, GPIO0);  else gpio_set(GPIOA, GPIO0);
for (int i = 0; i <  500000; ++i) __asm__("nop");
counter++;
// Reset, to bootloader
if (counter>15) bootloader_vector_table->reset();
---

--- Includes
#include <libopencm3/cm3/vector.h>
#include <libopencm3/cm3/systick.h>
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/usb/usbd.h>
#include <libopencm3/usb/cdc.h>
---

--- Read keyboard matrix
---

--- USB Interrupt Handler
---
